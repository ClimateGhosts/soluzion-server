// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using QuickType;
//
//    var sharedEvent = SharedEvent.FromJson(jsonString);
//    var serverError = ServerError.FromJson(jsonString);
//    var serverEvents = ServerEvents.FromJson(jsonString);
//    var serverEvent = ServerEvent.FromJson(jsonString);
//    var clientEvents = ClientEvents.FromJson(jsonString);
//    var clientEvent = ClientEvent.FromJson(jsonString);
//    var operatorParam = OperatorParam.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// Events handled by the server (sent by the client)
    /// </summary>
    public partial class ServerEvents
    {
        [JsonProperty("create_room")]
        public CreateRoom CreateRoom { get; set; }

        [JsonProperty("join_room")]
        public JoinRoom JoinRoom { get; set; }

        [JsonProperty("operator_chosen")]
        public OperatorChosen OperatorChosen { get; set; }
    }

    public partial class CreateRoom
    {
        [JsonProperty("room")]
        public string Room { get; set; }
    }

    public partial class JoinRoom
    {
        [JsonProperty("role")]
        public double? Role { get; set; }

        [JsonProperty("room")]
        public string Room { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }
    }

    public partial class OperatorChosen
    {
        [JsonProperty("op_no")]
        public double OpNo { get; set; }

        [JsonProperty("params")]
        public object[] Params { get; set; }
    }

    /// <summary>
    /// Events handled by the client (sent by the server)
    /// </summary>
    public partial class ClientEvents
    {
        [JsonProperty("error")]
        public Error Error { get; set; }

        [JsonProperty("operators_available")]
        public OperatorsAvailable OperatorsAvailable { get; set; }

        [JsonProperty("room_created")]
        public RoomCreated RoomCreated { get; set; }

        [JsonProperty("room_joined")]
        public RoomJoined RoomJoined { get; set; }

        [JsonProperty("room_left")]
        public RoomLeft RoomLeft { get; set; }

        [JsonProperty("state_updated")]
        public StateUpdated StateUpdated { get; set; }
    }

    public partial class Error
    {
        [JsonProperty("error")]
        public ServerErrorEnum ErrorError { get; set; }

        [JsonProperty("event")]
        public ServerEventEnum Event { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class OperatorsAvailable
    {
        [JsonProperty("operators")]
        public Operator[] Operators { get; set; }
    }

    public partial class Operator
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("op_no")]
        public double OpNo { get; set; }

        [JsonProperty("params")]
        public Param[] Params { get; set; }
    }

    public partial class Param
    {
        [JsonProperty("max")]
        public double? Max { get; set; }

        [JsonProperty("min")]
        public double? Min { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class RoomCreated
    {
        [JsonProperty("room")]
        public string Room { get; set; }
    }

    public partial class RoomJoined
    {
        [JsonProperty("username")]
        public string Username { get; set; }
    }

    public partial class RoomLeft
    {
        [JsonProperty("username")]
        public string Username { get; set; }
    }

    public partial class StateUpdated
    {
        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("state")]
        public Dictionary<string, object> State { get; set; }
    }

    public partial class OperatorParam
    {
        [JsonProperty("max")]
        public double? Max { get; set; }

        [JsonProperty("min")]
        public double? Min { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    /// <summary>
    /// Primary copy of Soluzion Types; used to generate others for Python, C# etc.
    /// </summary>
    public enum SharedEventEnum { Connect, Disconnect };

    public enum ServerErrorEnum { CantJoinRoom, GameAlreadyStarted, GameNotStarted, InvalidOperator, NotInARoom, RoomAlreadyExists };

    public enum ServerEventEnum { CreateRoom, JoinRoom, LeaveRoom, OperatorChosen, StartGame };

    public enum TypeEnum { Float, Int, Str };

    public enum ClientEventEnum { Error, GameEnded, GameStarted, OperatorsAvailable, RoomCreated, RoomJoined, RoomLeft, StateUpdated };

    public class SharedEvent
    {
        public static SharedEventEnum FromJson(string json) => JsonConvert.DeserializeObject<SharedEventEnum>(json, QuickType.Converter.Settings);
    }

    public class ServerError
    {
        public static ServerErrorEnum FromJson(string json) => JsonConvert.DeserializeObject<ServerErrorEnum>(json, QuickType.Converter.Settings);
    }

    public partial class ServerEvents
    {
        public static ServerEvents FromJson(string json) => JsonConvert.DeserializeObject<ServerEvents>(json, QuickType.Converter.Settings);
    }

    public class ServerEvent
    {
        public static ServerEventEnum FromJson(string json) => JsonConvert.DeserializeObject<ServerEventEnum>(json, QuickType.Converter.Settings);
    }

    public partial class ClientEvents
    {
        public static ClientEvents FromJson(string json) => JsonConvert.DeserializeObject<ClientEvents>(json, QuickType.Converter.Settings);
    }

    public class ClientEvent
    {
        public static ClientEventEnum FromJson(string json) => JsonConvert.DeserializeObject<ClientEventEnum>(json, QuickType.Converter.Settings);
    }

    public partial class OperatorParam
    {
        public static OperatorParam FromJson(string json) => JsonConvert.DeserializeObject<OperatorParam>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SharedEventEnum self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this ServerErrorEnum self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this ServerEvents self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this ServerEventEnum self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this ClientEvents self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this ClientEventEnum self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this OperatorParam self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SharedEventEnumConverter.Singleton,
                ServerErrorEnumConverter.Singleton,
                ServerEventEnumConverter.Singleton,
                TypeEnumConverter.Singleton,
                ClientEventEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SharedEventEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SharedEventEnum) || t == typeof(SharedEventEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "connect":
                    return SharedEventEnum.Connect;
                case "disconnect":
                    return SharedEventEnum.Disconnect;
            }
            throw new Exception("Cannot unmarshal type SharedEventEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SharedEventEnum)untypedValue;
            switch (value)
            {
                case SharedEventEnum.Connect:
                    serializer.Serialize(writer, "connect");
                    return;
                case SharedEventEnum.Disconnect:
                    serializer.Serialize(writer, "disconnect");
                    return;
            }
            throw new Exception("Cannot marshal type SharedEventEnum");
        }

        public static readonly SharedEventEnumConverter Singleton = new SharedEventEnumConverter();
    }

    internal class ServerErrorEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ServerErrorEnum) || t == typeof(ServerErrorEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CantJoinRoom":
                    return ServerErrorEnum.CantJoinRoom;
                case "GameAlreadyStarted":
                    return ServerErrorEnum.GameAlreadyStarted;
                case "GameNotStarted":
                    return ServerErrorEnum.GameNotStarted;
                case "InvalidOperator":
                    return ServerErrorEnum.InvalidOperator;
                case "NotInARoom":
                    return ServerErrorEnum.NotInARoom;
                case "RoomAlreadyExists":
                    return ServerErrorEnum.RoomAlreadyExists;
            }
            throw new Exception("Cannot unmarshal type ServerErrorEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ServerErrorEnum)untypedValue;
            switch (value)
            {
                case ServerErrorEnum.CantJoinRoom:
                    serializer.Serialize(writer, "CantJoinRoom");
                    return;
                case ServerErrorEnum.GameAlreadyStarted:
                    serializer.Serialize(writer, "GameAlreadyStarted");
                    return;
                case ServerErrorEnum.GameNotStarted:
                    serializer.Serialize(writer, "GameNotStarted");
                    return;
                case ServerErrorEnum.InvalidOperator:
                    serializer.Serialize(writer, "InvalidOperator");
                    return;
                case ServerErrorEnum.NotInARoom:
                    serializer.Serialize(writer, "NotInARoom");
                    return;
                case ServerErrorEnum.RoomAlreadyExists:
                    serializer.Serialize(writer, "RoomAlreadyExists");
                    return;
            }
            throw new Exception("Cannot marshal type ServerErrorEnum");
        }

        public static readonly ServerErrorEnumConverter Singleton = new ServerErrorEnumConverter();
    }

    internal class ServerEventEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ServerEventEnum) || t == typeof(ServerEventEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "create_room":
                    return ServerEventEnum.CreateRoom;
                case "join_room":
                    return ServerEventEnum.JoinRoom;
                case "leave_room":
                    return ServerEventEnum.LeaveRoom;
                case "operator_chosen":
                    return ServerEventEnum.OperatorChosen;
                case "start_game":
                    return ServerEventEnum.StartGame;
            }
            throw new Exception("Cannot unmarshal type ServerEventEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ServerEventEnum)untypedValue;
            switch (value)
            {
                case ServerEventEnum.CreateRoom:
                    serializer.Serialize(writer, "create_room");
                    return;
                case ServerEventEnum.JoinRoom:
                    serializer.Serialize(writer, "join_room");
                    return;
                case ServerEventEnum.LeaveRoom:
                    serializer.Serialize(writer, "leave_room");
                    return;
                case ServerEventEnum.OperatorChosen:
                    serializer.Serialize(writer, "operator_chosen");
                    return;
                case ServerEventEnum.StartGame:
                    serializer.Serialize(writer, "start_game");
                    return;
            }
            throw new Exception("Cannot marshal type ServerEventEnum");
        }

        public static readonly ServerEventEnumConverter Singleton = new ServerEventEnumConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "float":
                    return TypeEnum.Float;
                case "int":
                    return TypeEnum.Int;
                case "str":
                    return TypeEnum.Str;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Float:
                    serializer.Serialize(writer, "float");
                    return;
                case TypeEnum.Int:
                    serializer.Serialize(writer, "int");
                    return;
                case TypeEnum.Str:
                    serializer.Serialize(writer, "str");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ClientEventEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ClientEventEnum) || t == typeof(ClientEventEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "error":
                    return ClientEventEnum.Error;
                case "game_ended":
                    return ClientEventEnum.GameEnded;
                case "game_started":
                    return ClientEventEnum.GameStarted;
                case "operators_available":
                    return ClientEventEnum.OperatorsAvailable;
                case "room_created":
                    return ClientEventEnum.RoomCreated;
                case "room_joined":
                    return ClientEventEnum.RoomJoined;
                case "room_left":
                    return ClientEventEnum.RoomLeft;
                case "state_updated":
                    return ClientEventEnum.StateUpdated;
            }
            throw new Exception("Cannot unmarshal type ClientEventEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ClientEventEnum)untypedValue;
            switch (value)
            {
                case ClientEventEnum.Error:
                    serializer.Serialize(writer, "error");
                    return;
                case ClientEventEnum.GameEnded:
                    serializer.Serialize(writer, "game_ended");
                    return;
                case ClientEventEnum.GameStarted:
                    serializer.Serialize(writer, "game_started");
                    return;
                case ClientEventEnum.OperatorsAvailable:
                    serializer.Serialize(writer, "operators_available");
                    return;
                case ClientEventEnum.RoomCreated:
                    serializer.Serialize(writer, "room_created");
                    return;
                case ClientEventEnum.RoomJoined:
                    serializer.Serialize(writer, "room_joined");
                    return;
                case ClientEventEnum.RoomLeft:
                    serializer.Serialize(writer, "room_left");
                    return;
                case ClientEventEnum.StateUpdated:
                    serializer.Serialize(writer, "state_updated");
                    return;
            }
            throw new Exception("Cannot marshal type ClientEventEnum");
        }

        public static readonly ClientEventEnumConverter Singleton = new ClientEventEnumConverter();
    }
}
