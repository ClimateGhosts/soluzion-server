// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using SoluzionTypes;
//
//    var sharedEvent = SharedEvent.FromJson(jsonString);
//    var serverEvents = ServerEvents.FromJson(jsonString);
//    var createRoom = CreateRoom.FromJson(jsonString);
//    var joinRoom = JoinRoom.FromJson(jsonString);
//    var operatorChosen = OperatorChosen.FromJson(jsonString);
//    var setName = SetName.FromJson(jsonString);
//    var setRoles = SetRoles.FromJson(jsonString);
//    var clientEvent = ClientEvent.FromJson(jsonString);
//    var clientEvents = ClientEvents.FromJson(jsonString);
//    var error = Error.FromJson(jsonString);
//    var serverError = ServerError.FromJson(jsonString);
//    var serverEvent = ServerEvent.FromJson(jsonString);
//    var gameEnded = GameEnded.FromJson(jsonString);
//    var gameStarted = GameStarted.FromJson(jsonString);
//    var operatorApplied = OperatorApplied.FromJson(jsonString);
//    var operatorAppliedOperator = OperatorAppliedOperator.FromJson(jsonString);
//    var operatorsAvailable = OperatorsAvailable.FromJson(jsonString);
//    var operatorElement = OperatorElement.FromJson(jsonString);
//    var param = Param.FromJson(jsonString);
//    var purpleType = PurpleType.FromJson(jsonString);
//    var rolesChanged = RolesChanged.FromJson(jsonString);
//    var roomCreated = RoomCreated.FromJson(jsonString);
//    var roomJoined = RoomJoined.FromJson(jsonString);
//    var roomLeft = RoomLeft.FromJson(jsonString);
//    var transition = Transition.FromJson(jsonString);
//    var role = Role.FromJson(jsonString);
//    var convert = Convert.FromJson(jsonString);

namespace SoluzionTypes
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ServerEvents
    {
        /// <summary>
        /// Request for the server to create a new room
        /// </summary>
        [JsonProperty("create_room")]
        public CreateRoom CreateRoom { get; set; }

        /// <summary>
        /// Request for the sender to join an existing room, optionally setting a username
        /// </summary>
        [JsonProperty("join_room")]
        public JoinRoom JoinRoom { get; set; }

        /// <summary>
        /// Request for the sender to leave their current room
        /// </summary>
        [JsonProperty("leave_room")]
        public Dictionary<string, object> LeaveRoom { get; set; }

        /// <summary>
        /// Request for a specific operator to be replied within the sender's game session
        /// </summary>
        [JsonProperty("operator_chosen")]
        public OperatorChosen OperatorChosen { get; set; }

        /// <summary>
        /// Request to set the sender's username
        /// </summary>
        [JsonProperty("set_name")]
        public SetName SetName { get; set; }

        /// <summary>
        /// Request to set the sender's roles
        /// </summary>
        [JsonProperty("set_roles")]
        public SetRoles SetRoles { get; set; }

        /// <summary>
        /// Request to start the game for the sender's current room
        /// </summary>
        [JsonProperty("start_game")]
        public Dictionary<string, object> StartGame { get; set; }
    }

    /// <summary>
    /// Request for the server to create a new room
    /// </summary>
    public partial class CreateRoom
    {
        [JsonProperty("room")]
        public string Room { get; set; }
    }

    /// <summary>
    /// Request for the sender to join an existing room, optionally setting a username
    /// </summary>
    public partial class JoinRoom
    {
        [JsonProperty("room")]
        public string Room { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }
    }

    /// <summary>
    /// Request for a specific operator to be replied within the sender's game session
    /// </summary>
    public partial class OperatorChosen
    {
        [JsonProperty("op_no")]
        public double OpNo { get; set; }

        [JsonProperty("params")]
        public object[] Params { get; set; }
    }

    /// <summary>
    /// Request to set the sender's username
    /// </summary>
    public partial class SetName
    {
        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// Request to set the sender's roles
    /// </summary>
    public partial class SetRoles
    {
        [JsonProperty("roles")]
        public double[] Roles { get; set; }
    }

    public partial class ClientEvents
    {
        /// <summary>
        /// An error has been caused by one of the ServerEvents this client has sent
        /// </summary>
        [JsonProperty("error")]
        public Error Error { get; set; }

        /// <summary>
        /// The game has ended for the current client's room
        /// </summary>
        [JsonProperty("game_ended")]
        public GameEnded GameEnded { get; set; }

        /// <summary>
        /// The game has been started for the current client's room
        /// </summary>
        [JsonProperty("game_started")]
        public GameStarted GameStarted { get; set; }

        /// <summary>
        /// An operator was applied for the current client's game, transforming the state
        /// </summary>
        [JsonProperty("operator_applied")]
        public OperatorApplied OperatorApplied { get; set; }

        /// <summary>
        /// A new set of operators is available for the current client
        /// </summary>
        [JsonProperty("operators_available")]
        public OperatorsAvailable OperatorsAvailable { get; set; }

        /// <summary>
        /// A user in the current room has a changed set of roles
        /// </summary>
        [JsonProperty("roles_changed")]
        public RolesChanged RolesChanged { get; set; }

        /// <summary>
        /// A room/lobby with the given name has been created
        /// </summary>
        [JsonProperty("room_created")]
        public RoomCreated RoomCreated { get; set; }

        /// <summary>
        /// A user has joined the client's room
        /// </summary>
        [JsonProperty("room_joined")]
        public RoomJoined RoomJoined { get; set; }

        /// <summary>
        /// A user has left the current client's room
        /// </summary>
        [JsonProperty("room_left")]
        public RoomLeft RoomLeft { get; set; }

        /// <summary>
        /// A transition event has occurred for the current client's game
        /// </summary>
        [JsonProperty("transition")]
        public Transition Transition { get; set; }
    }

    /// <summary>
    /// An error has been caused by one of the ServerEvents this client has sent
    /// </summary>
    public partial class Error
    {
        [JsonProperty("error")]
        public ServerErrorEnum ErrorError { get; set; }

        [JsonProperty("event")]
        public ServerEventEnum Event { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// The game has ended for the current client's room
    /// </summary>
    public partial class GameEnded
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    /// <summary>
    /// The game has been started for the current client's room
    /// </summary>
    public partial class GameStarted
    {
        /// <summary>
        /// new state's __str__ message
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }

        /// <summary>
        /// JSON representation of new state
        /// </summary>
        [JsonProperty("state")]
        public string State { get; set; }
    }

    /// <summary>
    /// An operator was applied for the current client's game, transforming the state
    /// </summary>
    public partial class OperatorApplied
    {
        /// <summary>
        /// new state's __str__ output
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("operator")]
        public OperatorAppliedOperator Operator { get; set; }

        /// <summary>
        /// JSON representation of new state
        /// </summary>
        [JsonProperty("state")]
        public string State { get; set; }
    }

    public partial class OperatorAppliedOperator
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("op_no")]
        public double OpNo { get; set; }

        [JsonProperty("params")]
        public object[] Params { get; set; }
    }

    /// <summary>
    /// A new set of operators is available for the current client
    /// </summary>
    public partial class OperatorsAvailable
    {
        [JsonProperty("operators")]
        public OperatorElement[] Operators { get; set; }
    }

    public partial class OperatorElement
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("op_no")]
        public double OpNo { get; set; }

        [JsonProperty("params")]
        public Param[] Params { get; set; }
    }

    public partial class Param
    {
        [JsonProperty("max")]
        public double? Max { get; set; }

        [JsonProperty("min")]
        public double? Min { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    /// <summary>
    /// A user in the current room has a changed set of roles
    /// </summary>
    public partial class RolesChanged
    {
        /// <summary>
        /// Role numbers are indices within the Soluzion problem's ROLES array
        /// </summary>
        [JsonProperty("roles")]
        public double[] Roles { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }
    }

    /// <summary>
    /// A room/lobby with the given name has been created
    /// </summary>
    public partial class RoomCreated
    {
        [JsonProperty("room")]
        public string Room { get; set; }
    }

    /// <summary>
    /// A user has joined the client's room
    /// </summary>
    public partial class RoomJoined
    {
        [JsonProperty("username")]
        public string Username { get; set; }
    }

    /// <summary>
    /// A user has left the current client's room
    /// </summary>
    public partial class RoomLeft
    {
        [JsonProperty("username")]
        public string Username { get; set; }
    }

    /// <summary>
    /// A transition event has occurred for the current client's game
    /// </summary>
    public partial class Transition
    {
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class Role
    {
        [JsonProperty("max")]
        public double? Max { get; set; }

        [JsonProperty("min")]
        public double? Min { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Convert
    {
    }

    /// <summary>
    /// Events handled and sent by both client and server
    /// </summary>
    public enum SharedEventEnum { Connect, Disconnect };

    public enum ClientEventEnum { Error, GameEnded, GameStarted, OperatorApplied, OperatorsAvailable, RolesChanged, RoomCreated, RoomJoined, RoomLeft, Transition };

    public enum ServerErrorEnum { CantJoinRoom, GameAlreadyStarted, GameNotStarted, InvalidOperator, InvalidRoles, NotInARoom, RoomAlreadyExists };

    /// <summary>
    /// Events handled by the server (sent by the client)
    /// </summary>
    public enum ServerEventEnum { CreateRoom, JoinRoom, LeaveRoom, OperatorChosen, SetName, SetRoles, StartGame };

    public enum TypeEnum { Float, Int, Str };

    public class SharedEvent
    {
        public static SharedEventEnum FromJson(string json) => JsonConvert.DeserializeObject<SharedEventEnum>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class ServerEvents
    {
        public static ServerEvents FromJson(string json) => JsonConvert.DeserializeObject<ServerEvents>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class CreateRoom
    {
        public static CreateRoom FromJson(string json) => JsonConvert.DeserializeObject<CreateRoom>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class JoinRoom
    {
        public static JoinRoom FromJson(string json) => JsonConvert.DeserializeObject<JoinRoom>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class OperatorChosen
    {
        public static OperatorChosen FromJson(string json) => JsonConvert.DeserializeObject<OperatorChosen>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class SetName
    {
        public static SetName FromJson(string json) => JsonConvert.DeserializeObject<SetName>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class SetRoles
    {
        public static SetRoles FromJson(string json) => JsonConvert.DeserializeObject<SetRoles>(json, SoluzionTypes.Converter.Settings);
    }

    public class ClientEvent
    {
        public static ClientEventEnum FromJson(string json) => JsonConvert.DeserializeObject<ClientEventEnum>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class ClientEvents
    {
        public static ClientEvents FromJson(string json) => JsonConvert.DeserializeObject<ClientEvents>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class Error
    {
        public static Error FromJson(string json) => JsonConvert.DeserializeObject<Error>(json, SoluzionTypes.Converter.Settings);
    }

    public class ServerError
    {
        public static ServerErrorEnum FromJson(string json) => JsonConvert.DeserializeObject<ServerErrorEnum>(json, SoluzionTypes.Converter.Settings);
    }

    public class ServerEvent
    {
        public static ServerEventEnum FromJson(string json) => JsonConvert.DeserializeObject<ServerEventEnum>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class GameEnded
    {
        public static GameEnded FromJson(string json) => JsonConvert.DeserializeObject<GameEnded>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class GameStarted
    {
        public static GameStarted FromJson(string json) => JsonConvert.DeserializeObject<GameStarted>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class OperatorApplied
    {
        public static OperatorApplied FromJson(string json) => JsonConvert.DeserializeObject<OperatorApplied>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class OperatorAppliedOperator
    {
        public static OperatorAppliedOperator FromJson(string json) => JsonConvert.DeserializeObject<OperatorAppliedOperator>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class OperatorsAvailable
    {
        public static OperatorsAvailable FromJson(string json) => JsonConvert.DeserializeObject<OperatorsAvailable>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class OperatorElement
    {
        public static OperatorElement FromJson(string json) => JsonConvert.DeserializeObject<OperatorElement>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class Param
    {
        public static Param FromJson(string json) => JsonConvert.DeserializeObject<Param>(json, SoluzionTypes.Converter.Settings);
    }

    public class PurpleType
    {
        public static TypeEnum FromJson(string json) => JsonConvert.DeserializeObject<TypeEnum>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class RolesChanged
    {
        public static RolesChanged FromJson(string json) => JsonConvert.DeserializeObject<RolesChanged>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class RoomCreated
    {
        public static RoomCreated FromJson(string json) => JsonConvert.DeserializeObject<RoomCreated>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class RoomJoined
    {
        public static RoomJoined FromJson(string json) => JsonConvert.DeserializeObject<RoomJoined>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class RoomLeft
    {
        public static RoomLeft FromJson(string json) => JsonConvert.DeserializeObject<RoomLeft>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class Transition
    {
        public static Transition FromJson(string json) => JsonConvert.DeserializeObject<Transition>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class Role
    {
        public static Role FromJson(string json) => JsonConvert.DeserializeObject<Role>(json, SoluzionTypes.Converter.Settings);
    }

    public partial class Convert
    {
        public static Convert FromJson(string json) => JsonConvert.DeserializeObject<Convert>(json, SoluzionTypes.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SharedEventEnum self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this ServerEvents self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this CreateRoom self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this JoinRoom self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this OperatorChosen self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this SetName self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this SetRoles self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this ClientEventEnum self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this ClientEvents self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this Error self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this ServerErrorEnum self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this ServerEventEnum self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this GameEnded self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this GameStarted self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this OperatorApplied self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this OperatorAppliedOperator self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this OperatorsAvailable self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this OperatorElement self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this Param self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this TypeEnum self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this RolesChanged self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this RoomCreated self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this RoomJoined self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this RoomLeft self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this Transition self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this Role self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
        public static string ToJson(this Convert self) => JsonConvert.SerializeObject(self, SoluzionTypes.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SharedEventEnumConverter.Singleton,
                ClientEventEnumConverter.Singleton,
                ServerErrorEnumConverter.Singleton,
                ServerEventEnumConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class SharedEventEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SharedEventEnum) || t == typeof(SharedEventEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "connect":
                    return SharedEventEnum.Connect;
                case "disconnect":
                    return SharedEventEnum.Disconnect;
            }
            throw new Exception("Cannot unmarshal type SharedEventEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SharedEventEnum)untypedValue;
            switch (value)
            {
                case SharedEventEnum.Connect:
                    serializer.Serialize(writer, "connect");
                    return;
                case SharedEventEnum.Disconnect:
                    serializer.Serialize(writer, "disconnect");
                    return;
            }
            throw new Exception("Cannot marshal type SharedEventEnum");
        }

        public static readonly SharedEventEnumConverter Singleton = new SharedEventEnumConverter();
    }

    internal class ClientEventEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ClientEventEnum) || t == typeof(ClientEventEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "error":
                    return ClientEventEnum.Error;
                case "game_ended":
                    return ClientEventEnum.GameEnded;
                case "game_started":
                    return ClientEventEnum.GameStarted;
                case "operator_applied":
                    return ClientEventEnum.OperatorApplied;
                case "operators_available":
                    return ClientEventEnum.OperatorsAvailable;
                case "roles_changed":
                    return ClientEventEnum.RolesChanged;
                case "room_created":
                    return ClientEventEnum.RoomCreated;
                case "room_joined":
                    return ClientEventEnum.RoomJoined;
                case "room_left":
                    return ClientEventEnum.RoomLeft;
                case "transition":
                    return ClientEventEnum.Transition;
            }
            throw new Exception("Cannot unmarshal type ClientEventEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ClientEventEnum)untypedValue;
            switch (value)
            {
                case ClientEventEnum.Error:
                    serializer.Serialize(writer, "error");
                    return;
                case ClientEventEnum.GameEnded:
                    serializer.Serialize(writer, "game_ended");
                    return;
                case ClientEventEnum.GameStarted:
                    serializer.Serialize(writer, "game_started");
                    return;
                case ClientEventEnum.OperatorApplied:
                    serializer.Serialize(writer, "operator_applied");
                    return;
                case ClientEventEnum.OperatorsAvailable:
                    serializer.Serialize(writer, "operators_available");
                    return;
                case ClientEventEnum.RolesChanged:
                    serializer.Serialize(writer, "roles_changed");
                    return;
                case ClientEventEnum.RoomCreated:
                    serializer.Serialize(writer, "room_created");
                    return;
                case ClientEventEnum.RoomJoined:
                    serializer.Serialize(writer, "room_joined");
                    return;
                case ClientEventEnum.RoomLeft:
                    serializer.Serialize(writer, "room_left");
                    return;
                case ClientEventEnum.Transition:
                    serializer.Serialize(writer, "transition");
                    return;
            }
            throw new Exception("Cannot marshal type ClientEventEnum");
        }

        public static readonly ClientEventEnumConverter Singleton = new ClientEventEnumConverter();
    }

    internal class ServerErrorEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ServerErrorEnum) || t == typeof(ServerErrorEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CantJoinRoom":
                    return ServerErrorEnum.CantJoinRoom;
                case "GameAlreadyStarted":
                    return ServerErrorEnum.GameAlreadyStarted;
                case "GameNotStarted":
                    return ServerErrorEnum.GameNotStarted;
                case "InvalidOperator":
                    return ServerErrorEnum.InvalidOperator;
                case "InvalidRoles":
                    return ServerErrorEnum.InvalidRoles;
                case "NotInARoom":
                    return ServerErrorEnum.NotInARoom;
                case "RoomAlreadyExists":
                    return ServerErrorEnum.RoomAlreadyExists;
            }
            throw new Exception("Cannot unmarshal type ServerErrorEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ServerErrorEnum)untypedValue;
            switch (value)
            {
                case ServerErrorEnum.CantJoinRoom:
                    serializer.Serialize(writer, "CantJoinRoom");
                    return;
                case ServerErrorEnum.GameAlreadyStarted:
                    serializer.Serialize(writer, "GameAlreadyStarted");
                    return;
                case ServerErrorEnum.GameNotStarted:
                    serializer.Serialize(writer, "GameNotStarted");
                    return;
                case ServerErrorEnum.InvalidOperator:
                    serializer.Serialize(writer, "InvalidOperator");
                    return;
                case ServerErrorEnum.InvalidRoles:
                    serializer.Serialize(writer, "InvalidRoles");
                    return;
                case ServerErrorEnum.NotInARoom:
                    serializer.Serialize(writer, "NotInARoom");
                    return;
                case ServerErrorEnum.RoomAlreadyExists:
                    serializer.Serialize(writer, "RoomAlreadyExists");
                    return;
            }
            throw new Exception("Cannot marshal type ServerErrorEnum");
        }

        public static readonly ServerErrorEnumConverter Singleton = new ServerErrorEnumConverter();
    }

    internal class ServerEventEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ServerEventEnum) || t == typeof(ServerEventEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "create_room":
                    return ServerEventEnum.CreateRoom;
                case "join_room":
                    return ServerEventEnum.JoinRoom;
                case "leave_room":
                    return ServerEventEnum.LeaveRoom;
                case "operator_chosen":
                    return ServerEventEnum.OperatorChosen;
                case "set_name":
                    return ServerEventEnum.SetName;
                case "set_roles":
                    return ServerEventEnum.SetRoles;
                case "start_game":
                    return ServerEventEnum.StartGame;
            }
            throw new Exception("Cannot unmarshal type ServerEventEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ServerEventEnum)untypedValue;
            switch (value)
            {
                case ServerEventEnum.CreateRoom:
                    serializer.Serialize(writer, "create_room");
                    return;
                case ServerEventEnum.JoinRoom:
                    serializer.Serialize(writer, "join_room");
                    return;
                case ServerEventEnum.LeaveRoom:
                    serializer.Serialize(writer, "leave_room");
                    return;
                case ServerEventEnum.OperatorChosen:
                    serializer.Serialize(writer, "operator_chosen");
                    return;
                case ServerEventEnum.SetName:
                    serializer.Serialize(writer, "set_name");
                    return;
                case ServerEventEnum.SetRoles:
                    serializer.Serialize(writer, "set_roles");
                    return;
                case ServerEventEnum.StartGame:
                    serializer.Serialize(writer, "start_game");
                    return;
            }
            throw new Exception("Cannot marshal type ServerEventEnum");
        }

        public static readonly ServerEventEnumConverter Singleton = new ServerEventEnumConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "float":
                    return TypeEnum.Float;
                case "int":
                    return TypeEnum.Int;
                case "str":
                    return TypeEnum.Str;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Float:
                    serializer.Serialize(writer, "float");
                    return;
                case TypeEnum.Int:
                    serializer.Serialize(writer, "int");
                    return;
                case TypeEnum.Str:
                    serializer.Serialize(writer, "str");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
